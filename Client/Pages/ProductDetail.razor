@page "/product/get/{id:guid}"
@inject IProductServices productServices

@if (product == null && !Notfound)
{
    <div>Loading...</div>
}
else if (Notfound && Message != null && Message != "")
{
    <div>Error: @Message</div>
    
} else {
    <h3>Product detail</h3>
    <div class="row">
        <div class="col-auto mb-3">
            <div class="card" style="width: 30rem;">
                <img src="@product.ImageURLs.Find(i => i.IsMainImage == true)!.URL" class="card-img-top" alt="@product.ProductName">
                <div class="card-body">
                    <h5 class="card-title">@product.ProductName</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@product.Price đ</h6>
                    <p class="card-text">@product.Description</p>
                </div>
            </div>
        </div>
        <div class="col-auto">
            <div class="mb-3 input-group">
                <span class="input-group-text" for="formFile">Product Images</span>
                <span class="input-group-text" id="ProductImages">Current URL</span>
                <input value="@product.ImageURLs" type="text" class="form-control" aria-label="ProductImages" aria-describedby="ProductImages">
                <input class="form-control" type="file" id="formFile">
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text" id="ProductName">ProductName</span>
                <input @bind="@product.ProductName" @oninput="@((e) => { product.ProductName=(string)e.Value!;})" type="text" class="form-control" aria-label="Productname" aria-describedby="ProductName">
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text" id="Price">Price</span>
                <input @bind="@product.Price" @oninput="@((e) => { product.Price=(int)e.Value!;})" type="number" class="form-control" aria-label="Price" aria-describedby="Price">
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text" id="Description">Description</span>
                <textarea class="form-control" @bind="@product.Description" @oninput="@((e) => { product.Description=(string)e.Value!;})" aria-label="Description" aria-describedby="Description" style="height: 100px">
                </textarea>
            </div>
            <button @onclick="@onUpdateProduct" class="btn btn-warning">Update</button>
            <button @onclick="@onDeleteProduct" class="btn btn-danger">Delete</button>
        </div>
    </div> 
}

@code {
    private Product? product = null;
    private string Message { get; set; } = string.Empty;
    private bool Notfound { get; set; } = false;
    [Parameter]
    public Guid Id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var result = await productServices.getAsync(Id);
        if(result.Result != null) {
            product = result.Result;
        } else {
            Message = result.Message;
            Notfound = true;
        }
    }

    private async Task onUpdateProduct()
    {
        
        
    }

    private async Task onDeleteProduct()
    {
        var res = await productServices.deleteAsync(Id);
        if (res.IsSuccess)
        {
            Message = "Deleted";
        }
        else
        {
            Message = "Error";
        }
    }
}
