// <auto-generated />
using System;
using DTHApplication.Shared.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DTHApplication.Server.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20230418061509_addAdminAccount")]
    partial class addAdminAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DTHApplication.Shared.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DTHApplication.Shared.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DTHApplication.Shared.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfReceipt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DTHApplication.Shared.OrderProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("DTHApplication.Shared.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutOfStock")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DTHApplication.Shared.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f735207-fb9d-4bf9-a2e4-c17f20d96da2"),
                            AccountStatus = 0,
                            Address = "Cầu Giấy, Hà Nội",
                            CreatedDate = new DateTime(2023, 4, 18, 13, 15, 9, 812, DateTimeKind.Local).AddTicks(90),
                            DateOfBirth = new DateTime(1997, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mydarhieu1997@gmail.com",
                            Gender = 0,
                            LoginName = "mydarhieu97",
                            PasswordHash = new byte[] { 48, 120, 68, 56, 50, 68, 70, 65, 67, 65, 53, 54, 69, 67, 69, 49, 50, 70, 66, 55, 48, 65, 55, 68, 65, 56, 49, 53, 53, 55, 66, 67, 68, 69, 57, 69, 67, 57, 70, 53, 57, 55, 50, 50, 70, 52, 49, 52, 67, 66, 56, 53, 69, 66, 70, 70, 52, 66, 67, 55, 56, 54, 70, 54, 49, 57, 69, 53, 48, 55, 57, 69, 53, 54, 57, 53, 69, 50, 70, 51, 56, 68, 51, 65, 67, 68, 69, 57, 56, 53, 50, 48, 70, 69, 54, 70, 56, 53, 69, 68, 57, 52, 55, 51, 52, 48, 53, 66, 57, 56, 57, 54, 48, 53, 48, 68, 57, 50, 52, 56, 52, 66, 56, 65, 50, 49, 50, 65, 57, 70 },
                            PasswordSalt = new byte[] { 48, 120, 55, 48, 53, 65, 50, 57, 70, 49, 50, 57, 54, 55, 53, 49, 67, 55, 68, 53, 55, 52, 50, 53, 55, 55, 65, 50, 55, 51, 50, 55, 51, 68, 67, 48, 48, 69, 52, 69, 66, 54, 68, 67, 69, 54, 57, 51, 54, 68, 65, 50, 49, 68, 49, 52, 68, 51, 65, 69, 51, 67, 57, 54, 53, 49, 66, 54, 49, 51, 70, 57, 57, 57, 70, 70, 55, 66, 67, 50, 68, 51, 54, 49, 53, 49, 52, 49, 55, 67, 66, 57, 68, 66, 50, 68, 57, 56, 57, 54, 50, 57, 69, 53, 68, 52, 48, 65, 57, 53, 49, 66, 56, 65, 49, 56, 49, 56, 56, 53, 52, 52, 54, 51, 56, 69, 55, 54, 50, 56, 51, 67, 50, 70, 53, 67, 54, 68, 57, 55, 51, 54, 50, 48, 48, 66, 69, 67, 67, 57, 69, 67, 49, 70, 69, 49, 65, 68, 51, 51, 69, 53, 48, 68, 67, 67, 53, 50, 70, 65, 65, 54, 65, 65, 70, 68, 70, 50, 66, 54, 55, 50, 57, 50, 68, 66, 57, 48, 49, 52, 70, 54, 48, 51, 54, 65, 53, 56, 69, 66, 57, 54, 69, 52, 50, 69, 52, 70, 49, 52, 50, 52, 53, 65, 68, 65, 54, 52, 49, 51, 69, 69, 56, 67, 48, 55, 68, 54, 66, 50, 50, 48, 52, 53, 50, 48, 57, 69, 53, 57, 48, 69, 69, 56, 51, 57, 56, 69, 55, 52, 50, 48, 57, 49, 55, 56, 55, 65 },
                            PhoneNumber = "0396346126",
                            Role = 0,
                            UpdatedDate = new DateTime(2023, 4, 18, 13, 15, 9, 812, DateTimeKind.Local).AddTicks(232),
                            UserName = "Hieu Duong"
                        });
                });

            modelBuilder.Entity("DTHApplication.Shared.Image", b =>
                {
                    b.HasOne("DTHApplication.Shared.Product", "Product")
                        .WithMany("ImageURLs")
                        .HasForeignKey("ProductId");

                    b.HasOne("DTHApplication.Shared.User", "User")
                        .WithMany("ProfileImages")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DTHApplication.Shared.OrderProduct", b =>
                {
                    b.HasOne("DTHApplication.Shared.Order", "Order")
                        .WithMany("OrderProduct")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTHApplication.Shared.Product", "Product")
                        .WithMany("OrderProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DTHApplication.Shared.Product", b =>
                {
                    b.HasOne("DTHApplication.Shared.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DTHApplication.Shared.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DTHApplication.Shared.Order", b =>
                {
                    b.Navigation("OrderProduct");
                });

            modelBuilder.Entity("DTHApplication.Shared.Product", b =>
                {
                    b.Navigation("ImageURLs");

                    b.Navigation("OrderProduct");
                });

            modelBuilder.Entity("DTHApplication.Shared.User", b =>
                {
                    b.Navigation("ProfileImages");
                });
#pragma warning restore 612, 618
        }
    }
}
